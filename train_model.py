# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JX-PsGRoDsK3H5XfJbcl1EgPX2BaOfhm
"""

from google.colab import drive
drive.mount('/content/gdrive',force_remount=True)

import os
import numpy as np
import skimage.io as io
import keras
import pandas as pd
import matplotlib.pyplot as plt
from keras.layers import *
from keras.utils import *
from keras.optimizers import Adam
from keras.models import *
from sklearn.model_selection import train_test_split
from sklearn.utils import shuffle

os.chdir('/content/gdrive/My Drive/dataset/hello')
os.listdir()

X_train = pd.read_csv('X_train.csv')
X_train = X_train.drop(X_train.columns[0], axis = 1)
X_train = np.array(X_train)

Y_train = pd.read_csv('Y_train.csv')
Y_train = Y_train.drop(Y_train.columns[0], axis = 1)
Y_train = np.array(Y_train)

X_test = pd.read_csv('X_test.csv')
X_test = X_test.drop(X_test.columns[0], axis = 1)
X_test = np.array(X_test)

Y_test = pd.read_csv('Y_test.csv')
Y_test = Y_test.drop(Y_test.columns[0], axis = 1)
Y_test = np.array(Y_test)

X_train = X_train.reshape((61200,32,32,1))
print(X_train.shape)
Y_train = Y_train.reshape((61200,1))
print(Y_train.shape)
X_test = X_test.reshape((10800,32,32,1))
print(X_test.shape)
Y_test = Y_test.reshape((10800,1))
print(Y_test.shape)

ref={
1:"क", 2:"ख", 3:"ग", 4:"घ", 5:"ङ",
6:"च", 7:"छ", 8:"ज", 9:"झ", 10:"ञ",
11:"ट", 12:"ठ", 13:"ड", 14:"ढ", 15:"ण",
16:"त", 17:"थ", 18:"द", 19:"ध", 20:"न",
21:"प", 22:"फ", 23:"ब", 24:"भ", 25:"म",
26:"य", 27:"र", 28:"ल", 29:"व", 30:"श", 31:"ष",
32:"स", 33:"ह",34:"क्ष", 35:"त्र", 36:"ज्ञ",
}
print(ref)

X_train = X_train/255
X_test = X_test/255

X_train, Y_train = shuffle(X_train, Y_train, random_state = 2)
X_test, Y_test = shuffle(X_test, Y_test, random_state = 0)

plt.imshow(np.squeeze(X_test[0]))
print(ref[int(Y_test[0])])

X_test, X_val, Y_test, Y_val = train_test_split(X_test, Y_test, test_size = 0.6, random_state = 1)
print(X_test.shape)
print(X_val.shape)

Y_test = to_categorical(Y_test)
print(Y_test.shape)

Y_val = to_categorical(Y_val)
print(Y_val.shape)

Y_train = to_categorical(Y_train)
print(Y_train.shape)

def cnn (input_shape):
    X_in = Input(input_shape)
    X = ZeroPadding2D((3,3))(X_in)
    
    X = Conv2D(filters = 32, kernel_size = (5,5), strides = (1,1), name = 'conv0')(X)
    X = BatchNormalization(axis = 3, name = 'bn0')(X)
    X = Activation('relu')(X)
    X = MaxPooling2D(pool_size = (2,2), strides = (2,2), padding = 'same')(X)
    X = Dropout(0.2)(X)
    
    X = Conv2D(filters = 64, kernel_size = (5,5), strides = (1,1), name = 'conv1')(X)
    X = BatchNormalization(axis = 3, name = 'bn1')(X)
    X = Activation('relu')(X)
    X = MaxPooling2D(pool_size = (3,3), strides = (3,3), padding = 'same')(X)
    X = Dropout(0.2)(X)
    
    X = Flatten()(X)    
    X = Dense(400, activation = 'relu')(X)
    X = Dense(128, activation = 'relu')(X)
    X = Dense(37, activation = 'softmax')(X)
    
    model = Model(inputs = X_in, outputs = X, name = 'cnndev')
    return model
model = cnn((32,32,1))
model.summary()

model.compile(Adam(lr = 10e-4), loss = 'categorical_crossentropy', metrics = ['accuracy'])
history = model.fit(X_train, Y_train, epochs = 20, batch_size = 400, validation_data = (X_val, Y_val), verbose = 1)
# model.compile(loss = 'categorical_crossentropy', optimizer = 'Adam', metrics = ['accuracy'])
# hist = model.fit(X_train, y_train, epochs = 10,batch_size = 128,  verbose = 1, validation_split = 0.1)

fig, ax = plt.subplots(2,1)
ax[0].plot(history.history['loss'], color='b', label="Training loss")
ax[0].plot(history.history['val_loss'], color='r', label="validation loss",axes =ax[0])
legend = ax[0].legend(loc='best', shadow=True)

ax[1].plot(history.history['accuracy'], color='b', label="Training accuracy")
ax[1].plot(history.history['val_accuracy'], color='r',label="Validation accuracy")
legend = ax[1].legend(loc='best', shadow=True)

model.evaluate(X_test, Y_test, batch_size = 400, verbose =1)

predicted = model.predict(x = X_test, verbose = 1)
index = 500
img = X_test[index]
img = img.reshape((32,32))
plt.imshow(img)
predictedd = np.argmax(predicted, axis = 1)
print(ref[predictedd[index]])

model.save('model1.h5')

